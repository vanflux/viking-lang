// Generated from viking.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class vikingLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly TYPE = 18;
	public static readonly STRING = 19;
	public static readonly ID = 20;
	public static readonly DIGITS = 21;
	public static readonly WS = 22;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"TYPE", "STRING", "STRING_CHAR", "ID", "DIGITS", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "';'", "'if'", "'else'", "'while'", "'return'", "'{'", "'}'", 
		"'='", "'('", "','", "')'", "'<'", "'>'", "'+'", "'-'", "'['", "']'", 
		"'int'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "TYPE", "STRING", "ID", "DIGITS", 
		"WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(vikingLexer._LITERAL_NAMES, vikingLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return vikingLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(vikingLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "viking.g4"; }

	// @Override
	public get ruleNames(): string[] { return vikingLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return vikingLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return vikingLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return vikingLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x18\x9A\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r" +
		"\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x06\x14" +
		"g\n\x14\r\x14\x0E\x14h\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15x\n\x15" +
		"\x03\x15\x05\x15{\n\x15\x03\x15\x03\x15\x03\x15\x03\x15\x06\x15\x81\n" +
		"\x15\r\x15\x0E\x15\x82\x05\x15\x85\n\x15\x03\x16\x06\x16\x88\n\x16\r\x16" +
		"\x0E\x16\x89\x03\x16\x07\x16\x8D\n\x16\f\x16\x0E\x16\x90\v\x16\x03\x17" +
		"\x06\x17\x93\n\x17\r\x17\x0E\x17\x94\x03\x18\x03\x18\x03\x18\x03\x18\x02" +
		"\x02\x02\x19\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r" +
		"\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B" +
		"\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15" +
		")\x02\x02+\x02\x16-\x02\x17/\x02\x18\x03\x02\t\x06\x02\f\f\x0F\x0F$$^" +
		"^\f\x02$$))AA^^cdhhppttvvxx\x03\x0229\x05\x022;CHch\x04\x02C\\c|\x03\x02" +
		"2;\x05\x02\v\f\x0F\x0F\"\"\x02\xA4\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
		"\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
		"\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
		"-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x031\x03\x02\x02\x02\x053\x03\x02" +
		"\x02\x02\x076\x03\x02\x02\x02\t;\x03\x02\x02\x02\vA\x03\x02\x02\x02\r" +
		"H\x03\x02\x02\x02\x0FJ\x03\x02\x02\x02\x11L\x03\x02\x02\x02\x13N\x03\x02" +
		"\x02\x02\x15P\x03\x02\x02\x02\x17R\x03\x02\x02\x02\x19T\x03\x02\x02\x02" +
		"\x1BV\x03\x02\x02\x02\x1DX\x03\x02\x02\x02\x1FZ\x03\x02\x02\x02!\\\x03" +
		"\x02\x02\x02#^\x03\x02\x02\x02%`\x03\x02\x02\x02\'d\x03\x02\x02\x02)\x84" +
		"\x03\x02\x02\x02+\x87\x03\x02\x02\x02-\x92\x03\x02\x02\x02/\x96\x03\x02" +
		"\x02\x0212\x07=\x02\x022\x04\x03\x02\x02\x0234\x07k\x02\x0245\x07h\x02" +
		"\x025\x06\x03\x02\x02\x0267\x07g\x02\x0278\x07n\x02\x0289\x07u\x02\x02" +
		"9:\x07g\x02\x02:\b\x03\x02\x02\x02;<\x07y\x02\x02<=\x07j\x02\x02=>\x07" +
		"k\x02\x02>?\x07n\x02\x02?@\x07g\x02\x02@\n\x03\x02\x02\x02AB\x07t\x02" +
		"\x02BC\x07g\x02\x02CD\x07v\x02\x02DE\x07w\x02\x02EF\x07t\x02\x02FG\x07" +
		"p\x02\x02G\f\x03\x02\x02\x02HI\x07}\x02\x02I\x0E\x03\x02\x02\x02JK\x07" +
		"\x7F\x02\x02K\x10\x03\x02\x02\x02LM\x07?\x02\x02M\x12\x03\x02\x02\x02" +
		"NO\x07*\x02\x02O\x14\x03\x02\x02\x02PQ\x07.\x02\x02Q\x16\x03\x02\x02\x02" +
		"RS\x07+\x02\x02S\x18\x03\x02\x02\x02TU\x07>\x02\x02U\x1A\x03\x02\x02\x02" +
		"VW\x07@\x02\x02W\x1C\x03\x02\x02\x02XY\x07-\x02\x02Y\x1E\x03\x02\x02\x02" +
		"Z[\x07/\x02\x02[ \x03\x02\x02\x02\\]\x07]\x02\x02]\"\x03\x02\x02\x02^" +
		"_\x07_\x02\x02_$\x03\x02\x02\x02`a\x07k\x02\x02ab\x07p\x02\x02bc\x07v" +
		"\x02\x02c&\x03\x02\x02\x02df\x07$\x02\x02eg\x05)\x15\x02fe\x03\x02\x02" +
		"\x02gh\x03\x02\x02\x02hf\x03\x02\x02\x02hi\x03\x02\x02\x02ij\x03\x02\x02" +
		"\x02jk\x07$\x02\x02k(\x03\x02\x02\x02l\x85\n\x02\x02\x02mn\x07^\x02\x02" +
		"n\x85\x07\f\x02\x02op\x07^\x02\x02pq\x07\x0F\x02\x02q\x85\x07\f\x02\x02" +
		"rs\x07^\x02\x02s\x85\t\x03\x02\x02tu\x07^\x02\x02uw\t\x04\x02\x02vx\t" +
		"\x04\x02\x02wv\x03\x02\x02\x02wx\x03\x02\x02\x02xz\x03\x02\x02\x02y{\t" +
		"\x04\x02\x02zy\x03\x02\x02\x02z{\x03\x02\x02\x02{\x85\x03\x02\x02\x02" +
		"|}\x07^\x02\x02}~\x07z\x02\x02~\x80\x03\x02\x02\x02\x7F\x81\t\x05\x02" +
		"\x02\x80\x7F\x03\x02\x02\x02\x81\x82\x03\x02\x02\x02\x82\x80\x03\x02\x02" +
		"\x02\x82\x83\x03\x02\x02\x02\x83\x85\x03\x02\x02\x02\x84l\x03\x02\x02" +
		"\x02\x84m\x03\x02\x02\x02\x84o\x03\x02\x02\x02\x84r\x03\x02\x02\x02\x84" +
		"t\x03\x02\x02\x02\x84|\x03\x02\x02\x02\x85*\x03\x02\x02\x02\x86\x88\t" +
		"\x06\x02\x02\x87\x86\x03\x02\x02\x02\x88\x89\x03\x02\x02\x02\x89\x87\x03" +
		"\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x8A\x8E\x03\x02\x02\x02\x8B\x8D\t" +
		"\x07\x02\x02\x8C\x8B\x03\x02\x02\x02\x8D\x90\x03\x02\x02\x02\x8E\x8C\x03" +
		"\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F,\x03\x02\x02\x02\x90\x8E\x03" +
		"\x02\x02\x02\x91\x93\t\x07\x02\x02\x92\x91\x03\x02\x02\x02\x93\x94\x03" +
		"\x02\x02\x02\x94\x92\x03\x02\x02\x02\x94\x95\x03\x02\x02\x02\x95.\x03" +
		"\x02\x02\x02\x96\x97\t\b\x02\x02\x97\x98\x03\x02\x02\x02\x98\x99\b\x18" +
		"\x02\x02\x990\x03\x02\x02\x02\v\x02hwz\x82\x84\x89\x8E\x94\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!vikingLexer.__ATN) {
			vikingLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(vikingLexer._serializedATN));
		}

		return vikingLexer.__ATN;
	}

}

